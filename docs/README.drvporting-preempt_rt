// SPDX-License-Identifier: CC-BY-SA
// Modified by L-C. Duca (laurentiu[dot]duca [at] gmail [dot] com)

This file documents how to create a PREEMPT_RT RTnet driver from a Linux network driver.
It originates in the Xenomai docs and some steps are available only for Xenomai,
so this document is under revision.

This list was created when porting the microchip driver to RTnet and was
extended and revised afterwards. It is absolutely unsorted. Some points may
not apply to every driver, some may have to be added for others. It is
recommended to take a look at enc28j60.c (written for linux 5.4.5) 
or other existing drivers if some steps remain unclear.

IMPORTANT: Check if the critical paths of the driver (xmit function, interrupt
handler) are free of any unbounded or unacceptable long delays, e.g. caused by
waiting on hardware events.


0. disable napi because uses softirq

1. Add to beginning of file (also add a #define for MAX_UNITS if it is missing
   so far):

    #include <rtnet_port.h>
	#include <rtnet_multiple_queues.h>
	(do the above)
	
    static int cards[MAX_UNITS] = { [0 ... (MAX_UNITS-1)] = 1 };
    compat_module_int_param_array(cards, MAX_UNITS);
    MODULE_PARM_DESC(cards, "array of cards to be supported (e.g. 1,0,1)");
    in the probe() function {
        static int board_idx = -1;
        board_idx++;
        if( cards[board_idx] == 0)
                return -ENODEV;
    }
	(skip this if you have only one network card)

2. disable any copybreak mechanism (rtskbs are all equally sized)
Most of the bus-mastering linux drivers now use a `copybreak' scheme
where large packets are put directly into a kernel networking buffer by the card,
and small packets are copied by the CPU which primes the cache for subsequent processing. 

3. add the following fields to private data:

    struct rtskb_queue skb_pool;

	(skip this step)

4. initialize skb pool in probe or init function:

    if (rtskb_pool_init(&<priv>->skb_pool, RX_RING_SIZE*2) < RX_RING_SIZE*2) {
        rtskb_pool_release(&<priv>->skb_pool);
        <cleanup>...
        return -ENOMEM;
    }

	(skip this step)

5. free skb pool in cleanup function
(skip this step)

6. replace unregister_netdev with rt_unregister_rtnetdev


7. call rt_rtdev_disconnect in cleanup function (and on error cleanups!)


8. cleanup device structure with rtdev_free


9. replace netif_stop_queue with rtnetif_stop_queue
and netif_tx_stop_queue with rtnetif_tx_stop_queue


10. add to the close function:

    rt_stack_disconnect(dev);
	(skip this step)

11. replace struct sk_buff with struct rtskb


12. replace skb_XXX calls with rtskb_XXX


13. replace eth_type_trans with rt_eth_type_trans


14. replace netif_rx with rtnetif_rx


15. replace struct net_device with struct rtnet_device
and add an auxiliar net_device if needed (I have named it dummy).

16. replace netif_start_queue with rtnetif_start_queue


17. revise the xmit routine

17.1. add new locking scheme replacing any standard spin lock calls:

      unsigned long context;
      ...
      raw_spin_lock_irqsave(&<priv>->lock, context);
      ...
      raw_spin_unlock_irqrestore(&<priv>->lock, context);

(skip the following)
      /* ONLY IN EXCEPTIONAL CASES, e.g. if the operation can take more than a
       * few ten microseconds: */

      rtdm_irq_disable(&<priv>->irq_handle);
      rtdm_lock_get(&<priv>->lock);
      ...
      rtdm_lock_put(&<priv>->lock);
      rtdm_irq_enable(&<priv>->irq_handle);

      /* Note that the latter scheme does not work if the IRQ line is shared
       * with other devices. Also, rtdm_irq_disable/enable can be costly
       * themselves on certain architectures. */

17.2. add the following code right before the code which triggers the physical
      transmission (take care if data has to be transfered manually, i.e.
      without DMA):

      /* get and patch time stamp just before the transmission */
	  rtskb_tx_timestamp(skb);
	  
17.3. make the code above and the transmission triggering atomical by switching
      off all interrupts:

      unsigned long context;
      ...

      /* combined with the spinlock: */

      raw_spin_lock_irqsave(&<priv>->lock, context);
      <prepare transmission>
      <patch time stamp>
      <trigger transmission>
      raw_spin_unlock_irqrestore(&<priv>->lock, context);

      NOTE: Some hardware may require the driver to calculate the frame
      checksum, thus making a patching of the frame effectively impossible. In
      this case use the following strategy: switch off the interrupts only if
      there is actually a time stamp to patch. Normally, frames using this
      feature are rather short and will not cause long irq locks. Take a look
      at 8139too-rt or via-rhine-rt to find some examples.


18. modify interrupt handler:

    static int XXX_interrupt(void *vp)
    {
		/* vp points to rtnet_device or priv */
        struct rtnet_device *dev = (struct rtnet_device *)(vp);
        ...

    Also adapt the prototype of the interrupt handler accordingly if provided.

	(skip this step)

19. replace spin_lock/spin_unlock with raw_spin_lock/raw_spin_unlock within the
    interrupt handler


20. replace printk in xmit function, interrupt handler, and any function called
    within this context with rtdm_printk. Where avoidable, disable output in
    critical functions (i.e. when interrupts are off) completely.


21. replace dev_kfree_skb[_XXX] with dev_kfree_rtskb


22. replace alloc_etherdev with the following lines:

    dev = rt_alloc_etherdev(sizeof(struct XXX_private) /* or 0 */);
    if (dev == NULL)
        return -ENOMEM;
    rtdev_alloc_name(dev, "rteth%d");
    rt_rtdev_connect(dev, &RTDEV_manager);

23. replace request_irq in open function with the following lines:

    rt_stack_connect(dev, &STACK_manager);
	ret = request_irq(spi->irq, enc28j60_irq, IRQF_NO_THREAD, DRV_NAME, priv);
	if (ret)
        return ret;


24. replace netif_queue_stopped with rtnetif_queue_stopped
and netif_tx_queue_stopped with rtnetif_tx_queue_stopped


25. replace netif_(tx)_wake_queue with rtnetif_(tx)_wake_queue


26. add to the beginning of the probe or card-init function:

    static int cards_found = -1;

    cards_found++;
    if (cards[cards_found] == 0)
        return -ENODEV;

    (skip this step)

27. call ktime_get() within receive interrupt and set time_stamp field of skb accordingly


28. initialize new unsigned int old_packet_cnt with <priv>->stats.rx_packets at
    the beginning of the interrupt handler


29. add to the end of the interrupt handler:

    if (old_packet_cnt != <priv>->stats.rx_packets)
        rt_mark_stack_mgr(dev);


30. disable any timer setup and delete calls


31. uncomment not required(!) MII related assignments and functions


32. uncomment any other unused functions


33. replace register_netdev with rt_register_rtnetdev


34. replace netif_carrier_{on|off} with rtnetif_carrier_{on|off}


35. replace netdev_alloc_skb(size, ...) with rtnetdev_alloc_rtskb(size, , ...) // &<priv>->skb_pool)


36. adjust RX_RING_SIZE


37. replace MOD_INC_USE_COUNT/MOD_DEC_USE_COUNT with RTNET_MOD_INC_USE_COUNT/RTNET_MOD_DEC_USE_COUNT
    and check if they are used appropriately
	(skip this step)


38. rename type of lock field in private data from spinlock_t to raw_spinlock_t


39. replace spin_lock_init(&<priv>->lock) with raw_spinlock_init(&<priv>->lock)


40. rtskb structure does not contain a data_len field => set any occurrence to zero
	(now it contains a data_len field, so skip this step)


41. return from interrupt handler only by providing IRQ_HANDLED or IRQ_NONE as
    return values, depending if the IRQ was handled or not

42. fill rtdev field in every received rtskb object properly

    skb->rtdev = rtdev
	(now I think is not necessary because rtnetdev_alloc_rtskb() sets it)

XX. check the critical paths in xmit function and interrupt handler for delays
    or hardware wait loops, disable or avoid them

43. rtskb_reserve (skb, NET_IP_ALIGN); // instead of (skb, 2).

44. rename netdev_priv to rtnetdev_priv

45. add to priv struct net_device_stats stats;
	(I know it should be embedded in rtnetdev struct).

46. dev_close to rtdev_close
(skip this item)
Avoid using rtdev_close in driver_close(),
because it is called by rtifconfig rteth0 down.

47. disable pm

48. Rename XENO_DRIVERS_NET to RTNET
