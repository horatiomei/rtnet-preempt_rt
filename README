RTnet (UDP) on PREEMPT_RT Linux
====

Please read the whole doc to have an impression.

Features:
- ported raspberry pi 4 (bcmgenet), orange pi one (stmmac), 
realtek (8139too), ticpsw (beaglebone black), microchip (enc28j60)
- rtnet UDP socket, bind, recvmsg, sendto, recvfrom, sendmsg, select, poll system calls
(the system calls names are appended with _rtnet(), but you can rename them);
- timeout possible for recv;
- sockets with AF_INET (UDP) or AF_PACKET (raw) family;
- rtnetproxy for ssh and scp (but uses RT driver bandwidth)
- also see the help docs in the rtnet-geek repository.
TODO
- port routing, rtcfg, rtmac, tdma and nomac if there will be interest

0. download linux-5.9.tar.xz
https://cdn.kernel.org/pub/linux/kernel

1a. apply patch (includes PREEMPT_RT)
cd linux-5.9
patch -p1 < ../rtnet-v10c-preempt_rt-linux-5.9.patch

1b. Add the _rtnet() system calls
- rpi-4
cp ../rpi-4/unistd.h include/uapi/asm-generic/

- x86_64 qemu
cp ../x86_64/syscall_64.tbl arch/x86/entry/syscalls/

- orangepi-one
cp ../orangepi-one/syscall.tbl arch/arm/tools/

- beaglebone black (patch with bbb rtnet driver including PREEMPT_RT)
cp ../bbb/am335x-bone-common.dtsi arch/arm/boot/dts/
cp ../bbb/syscall.tbl arch/arm/tools/

- microchip enc28j60 on raspberry pi zero
# need RT SPI drivers, see https://github.com/laurentiuduca/real-time-spi
cp ../rpi-zero-enc28j60/bcm2835-rpi.dtsi arch/arm/boot/dts/
cp ../bbb/syscall.tbl arch/arm/tools/

2. use buildroot to setup a rootfs for the target board

3. configure linux

- How to compile mainline kernel for rpi 4 (choose the 64 bits version)
SSH disabled by default; can be enabled by creating a file with name "ssh" in boot partition
cmdline.txt: root=/dev/mmcblk1p2 rootwait console=tty1 console=ttyS1,115200
https://gist.github.com/lategoodbye/c7317a42bf7f9c07f5a91baed8c68f75
https://www.raspberrypi.org/forums/viewtopic.php?t=249579

- defconfig
rpi-4
make ARCH=arm64 defconfig
orangepi-one
make ARCH=arm sunxi_defconfig
bbb
make ARCH=arm omap2plus_defconfig
rpi-0
cmdline.txt: root=/dev/mmcblk0p2 rootwait console=tty1 console=ttyS1,115200
make ARCH=arm bcm2835_defconfig
qemu x86_64
make ARCH=x86_64 x86_64_defconfig

- In the kernel configuration, set the following settings as enabled [*] or disabled []
CONFIG_PREEMPT_RT_FULL: General setup → Preemption Model (Fully Preemptible Kernel (RT)) → Fully Preemptible Kernel (RT)
(Depends on: <choice> && EXPERT [=y] && ARCH_SUPPORTS_RT [=y] && KVM=[n])
Enable HIGH_RES_TIMERS: General setup → Timers subsystem → High Resolution Timer Support (Actually, this should already be enabled in the standard configuration.)
CONFIG_HZ_PERIODIC=n, CONFIG_NO_HZ=n, CONFIG_NO_HZ_FULL=y
- Kernel features - Processor type and features → [] Multi-core scheduler support (CONFIG_SCHED_MC)
- [] ACPI Support
- Power management and ACPI options / CPU Power Management --->
CPU Frequency scaling ---> [ ] CPU Frequency scaling
CPU idle ---> [ ] CPU idle PM support

- rtnet is in the net folder and must compile into kernel its driver
(there must be selected in-kernel ipv4, icmp and udp from the protocol stack
and proxy as a module and enable ARP handling via protocol proxy):
Select Networking Support - RTnet, 
	Protocol Stack -> (32) Size of central RX-FIFO,
		Real-Time IPv4, ICMP support, (32)  Maximum host routing table entries, 
		UDP support, Real-Time Packet Socket Support. The rest remains unselected.
	Drivers -> the driver for your computer
	Add-Ons -> IP protocol proxy for Linux

- be sure to disable the non-RTnet network drivers from net/ethernet
Device Drivers -> Network device support -> Ethernet driver support -> Broadcom, STMicroelectronics devices, TI, etc

4. Compile linux

- x86_64 qemu
make -j5 ARCH=x86_64 INSTALL_MOD_PATH=/home/laur/lucru/raspberry-pi/xenomai-x86_64/modules INSTALL_MOD_PATH=/home/user/modules CONFIG_DEBUG_INFO=y bzImage modules modules_install

- rpi-4
make -j5 ARCH=arm64 CROSS_COMPILE="..." CONFIG_DEBUG_INFO=y INSTALL_MOD_PATH=/home/laur/lucru/rtnet/modules Image bcm2711-rpi-4-b.dtb modules modules_install

- orangepi-one
make -j5 ARCH=arm CROSS_COMPILE="..." CONFIG_DEBUG_INFO=y INSTALL_MOD_PATH=/home/laur/lucru/rtnet/modules zImage sun8i-h3-orangepi-one.dtb modules modules_install

- bbb
make -j5 ARCH=arm CROSS_COMPILE="..." CONFIG_DEBUG_INFO=y INSTALL_MOD_PATH=/home/laur/lucru/rtnet/modules zImage am335x-boneblack.dtb modules modules_install

- rpi-0
make -j5 ARCH=arm CROSS_COMPILE="..." CONFIG_DEBUG_INFO=y INSTALL_MOD_PATH=/home/laur/lucru/rtnet/modules zImage bcm2835-rpi-zero-w.dtb modules modules_install

5. boot qemu x86_64 emulator or boot target board
- qemu x86_64 emulator (see x86_64/qemu/config-qemu.txt)
sudo qemu-system-x86_64 -m 1G --enable-kvm -M q35 -kernel bzImage -hda rootfs-50 -append "console=tty1 console=ttyS0 root=/dev/sda rw" -device rtl8139,netdev=bridgeid,mac=52:54:00:11:22:44 -netdev bridge,br=br0,id=bridgeid -serial stdio
sudo qemu-system-x86_64 -m 1G              -M q35 -kernel bzImage -hda rootfs-50 -append "console=tty1 console=ttyS0 root=/dev/sda rw" -device rtl8139,netdev=bridgeid,mac=52:54:00:11:22:44 -netdev bridge,br=br0,id=bridgeid -serial stdio
with empty password (ENTER).

6. after booting qemu or target, read start-modules.sh (a better name would be start-rtnet.sh)
- on the target:
./start-modules.sh:
set -x
mount -t debugfs debugfs /sys/kernel/debug
/root/rtifconfig rteth0 up 192.168.1.70
/root/rtifconfig rtlo up 127.0.0.1
ifconfig rtproxy up 192.168.1.70
/root/rtroute solicit 192.168.1.30 dev rteth0
/root/rtroute solicit 192.168.1.40 dev rteth0
/root/rtroute solicit 192.168.1.50 dev rteth0
/root/rtroute solicit 192.168.1.60 dev rteth0

- on the development host:
ping 192.168.1.70

7. There are provided tftp client (both x86_64 and arm)
and server (for x86_64).

8. Please read rtt-laur.c and rtt-sender.c/rtt-responder.c for UDP sockets
and raw_recv.c and raw_send.c for raw sockets.

8a. Hello world
on one computer:
./rtt-laur.out
on another computer
./rtt-laur.out -d 192.168.1.20

8b. On one computer
./rtt-responder.out
on another computer
./rtt-sender -d 192.168.1.20

8.c. On one computer
./raw_recv
on another computer
./raw_send

Success,
laurentiu [dot] duca [at] gmail [dot] com
